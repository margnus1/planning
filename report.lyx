#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
 \usepackage{algorithm2e}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Report, Group 4
\begin_inset Newline newline
\end_inset

Assingment 1 AI PDDL
\end_layout

\begin_layout Author
Rickard Lööf
\begin_inset Newline newline
\end_inset

Patrik w
\begin_inset Newline newline
\end_inset

Magnus lång
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Since the primary goal was to find the shortest path to the goal state,
 we decided to use Breath first search algorithm since it will find the
 shortest path first
\end_layout

\begin_layout Section
BFS
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "bfs.lyx"

\end_inset


\end_layout

\begin_layout Section
Example
\end_layout

\begin_layout Standard
Let us step through an exaple run on teh following file,
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "test1.json"

\end_inset


\end_layout

\begin_layout Standard
We start with parsing the file so we get more usfull data, in other words
 we save all actions in a list, all objects found in a list, the starting
 state and the goal we try to reach.
\begin_inset Newline newline
\end_inset

so in the example test1.json above we would have
\begin_inset Newline newline
\end_inset

Actions:[
\family typewriter
go_shopping(x)
\family default
,
\family typewriter
make_cake(x)
\family default
,
\family typewriter
wait(x)
\family default
,
\family typewriter
eat_cake_a(x)
\family default
, 
\family typewriter
eat_cake_b(x)
\family default
]
\begin_inset Newline newline
\end_inset

Objects:[
\family typewriter
mike
\family default
]
\begin_inset Newline newline
\end_inset

start: 
\family typewriter
person(mike)
\family default

\begin_inset Newline newline
\end_inset

goal: [
\family typewriter
person(mike)
\family default
,
\family typewriter
has_cake(mike)
\family default
,
\family typewriter
eaten_cake(mike)
\family default
]
\begin_inset Newline newline
\end_inset

now we find all actions the can be run on the starting state, in this case
 it is wait and go_shopping since they only need a person and in waits case
 also that you dont have hungry.
 so now we branch off in two different directions as you can see in the
 picture below 
\begin_inset CommandInset ref
LatexCommand nameref
reference "test1"

\end_inset


\begin_inset Newline newline
\end_inset

to simplify this example we chose to follow the path that start with him
 going shopping even if in reality both paths are run seperetly.
 in this case when we apply go_shopping the new state we gets is
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
, 
\family typewriter
has_mix(mike)
\family default
)
\begin_inset Newline newline
\end_inset

and now with this new state we do the same thing again, we locate all posible
 action that can be applyed on the current state.
 the actions we get is wait, go_shopping and a new one make_cake.
 this time we branch off into 3 ways with one action (go_shopping) leading
 back to the same state since you can only have one instace of every fluent
 (
\family typewriter
has_mix(mike)
\family default
).
 once again just for this example we follow the wait path and apply it to
 the current state and end up in the state
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
,
\family typewriter
has_mix(mike)
\family default
,
\family typewriter
hungry(mike)
\family default
)
\begin_inset Newline newline
\end_inset

as you can see in the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "test1"

\end_inset

, if we would have taken the wait path in the first step adn then did go
 shopping we would have ended up in this state.
\begin_inset Newline newline
\end_inset

so now once again we check whats actions is applicable on the current state
 and they are go_shopping and make_cake.
 We lose wait since it have a precondition that you cant have hungry.
 so now we only have one nonlooping choice and that is to make_cake and
 we then end up in the new state
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
,
\family typewriter
has_mix(mike)
\family default
,
\family typewriter
hungry(mike)
\family default
,
\family typewriter
has_cake(mike)
\family default
)
\begin_inset Newline newline
\end_inset

we again find the action we can apply, they are go_shopping, make_cake and
 eat_cake_a.
 we follow eat_cake_a since its the onlyone that dont loop to the same state
 again, so after applying eat_cake we end up in the new state
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
,
\family typewriter
has_mix(mike)
\family default
,
\family typewriter
eaten_cake(mike)
\family default
)
\begin_inset Newline newline
\end_inset

we again find the actions we can apply, they are go_shopping, make_cake
 and wait.
 we follow make_cake and end up in the state
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
,
\family typewriter
has_mix(mike)
\family default
,
\family typewriter
eaten_cake(mike)
\family default
,
\family typewriter
has_cake(mike)
\family default
)
\begin_inset Newline newline
\end_inset

now we can see that we have reached a state that contains the goal state
\begin_inset Newline newline
\end_inset

goal: [
\family typewriter
person(mike)
\family default
,
\family typewriter
has_cake(mike)
\family default
,
\family typewriter
eaten_cake(mike)
\family default
]
\begin_inset Newline newline
\end_inset

State:(
\family typewriter
person(mike)
\family default
,
\family typewriter
has_cake(mike)
\family default
,
\family typewriter
eaten_cake(mike)
\family default
,
\family typewriter
has_mix(mike)
\family default
)
\begin_inset Newline newline
\end_inset

and because a bfs runs all steps in paralell the first path to the goal
 we find is one of the shortest once
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename graph.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Picture
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "test1"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
