#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithm}  
\end_layout

\begin_layout Plain Layout


\backslash
SetAlgoLined  
\end_layout

\begin_layout Plain Layout


\backslash
SetKwInOut{Input}{Input}
\backslash
SetKwInOut{Output}{output}
\end_layout

\begin_layout Plain Layout

 
\backslash
KwData{A frontier queue $Q$ of tuples $
\backslash
langle s,
\backslash
, p
\backslash
rangle$ of children $c$ and paths $p$ to those children.
 
\backslash

\backslash
 A set of visited states $V$}  
\end_layout

\begin_layout Plain Layout

 
\backslash
Input{A planning problem $P$, an initial state $s$}
\end_layout

\begin_layout Plain Layout

 
\backslash
KwResult{Shortest path to $
\backslash
mathrm{goal}(P)$}
\end_layout

\begin_layout Plain Layout

 
\backslash
While{$Q$ is not empty}{
\end_layout

\begin_layout Plain Layout

  pop a state $
\backslash
langle s,
\backslash
, p 
\backslash
rangle$ from $Q$
\backslash
;   
\end_layout

\begin_layout Plain Layout

  find all actions $A$ that is applicable on $s$ 
\backslash
;
\end_layout

\begin_layout Plain Layout

  compute the set of children of $s$, $C 
\backslash
leftarrow 
\backslash
{
\backslash
langle
\backslash
mathrm{apply}(a,
\backslash
, s),
\backslash
, a
\backslash
rangle 
\backslash
,
\backslash
vert
\backslash
, a 
\backslash
in A
\backslash
}$
\backslash
;
\end_layout

\begin_layout Plain Layout

  
\backslash
ForEach{$C 
\backslash
ni 
\backslash
langle c,
\backslash
, a 
\backslash
rangle,
\backslash
, c 
\backslash
not
\backslash
in V$}{
\end_layout

\begin_layout Plain Layout

    add $
\backslash
langle c,
\backslash
, a 
\backslash
cdot p 
\backslash
rangle$ to the end of $Q$
\backslash
;
\end_layout

\begin_layout Plain Layout

	add $c$ to $V$
\backslash
;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout


\backslash
If{$s$ satisfies $
\backslash
mathrm{goal}(P)$}{
\end_layout

\begin_layout Plain Layout

	
\backslash
KwRet{the goal state and the Path to that goal}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

 
\backslash
caption{BFS}
\end_layout

\begin_layout Plain Layout

	
\backslash
label{alg:bfs}
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Algorithm
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "alg:bfs"

\end_inset

.
 We start with finding all possible actions that can be applied to the current
 state, then for each of the possible actions we run that action and if
 we reach a new state we check if it's the goal state, and if it's not the
 goal state we find all possible actions from this new state and again run
 them.
 This procedure was repeted until the goal state was reached.
 Then we return the goal state and the path we took to reach that goal.
\end_layout

\end_body
\end_document
